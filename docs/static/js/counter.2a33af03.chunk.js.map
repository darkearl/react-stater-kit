{"version":3,"sources":["webpack:///static/js/counter.2a33af03.chunk.js","webpack:///./src/routes/Counter/modules/counter.js","webpack:///./src/routes/Counter/components/Counter.js","webpack:///./src/routes/Counter/containers/CounterContainer.js"],"names":["webpackJsonp","75","module","exports","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","increment","arguments","length","undefined","type","COUNTER_INCREMENT","payload","counterReducer","state","initialState","action","handler","ACTION_HANDLERS","_ACTION_HANDLERS","default","COUNTER_DOUBLE_ASYNC","doubleAsync","dispatch","getState","Promise","resolve","setTimeout","counter","actions","139","__webpack_require__","_interopRequireDefault","__esModule","Counter","_react","_react2","_propTypes","_propTypes2","_ref","createElement","style","margin","className","onClick","propTypes","number","isRequired","func","140","_reactRedux","_counter","_Counter","_Counter2","mapDispatchToProps","mapStateToProps","connect"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAASC,EAAQC,GAEtB,YAWA,SAASC,GAAgBC,EAAKC,EAAKC,GAAiK,MAApJD,KAAOD,GAAOG,OAAOC,eAAeJ,EAAKC,GAAOC,MAAOA,EAAOG,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBP,EAAIC,GAAOC,EAAgBF,ECPrM,QAASQ,KAAsB,GAAXN,GAAWO,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAH,CACjC,QACEG,KAAUC,EACVC,QAAUZ,GAuCC,QAASa,KAA8C,GAA9BC,GAA8BP,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAtBQ,EAAcC,EAAQT,UAAA,GAC9DU,EAAUC,EAAgBF,EAAON,KAEvC,OAAOO,GAAUA,EAAQH,EAAOE,GAAUF,ED/C3Cb,OAAOC,eAAeN,EAAS,cAC7BI,OAAO,GAGT,IAAImB,EAEJvB,GCJeU,YDKfV,EAAQwB,QCqCeP,CAhDjB,IAAMF,uBAAoB,oBACpBU,yBAAuB,uBAgBvBC,gBAAc,WACzB,MAAO,UAACC,EAAUC,GAChB,MAAO,IAAIC,SAAQ,SAACC,GAClBC,WAAW,WACTJ,GACEb,KAAUW,EACVT,QAAUY,IAAWI,UAEvBF,KACC,SAaHR,GAROW,WACXvB,YACAgB,eAMIJ,SACHP,EAAwB,SAACG,EAAOE,GAAR,MAAmBF,GAAQE,EAAOJ,UADvDf,EAAAsB,EAEHE,EAAwB,SAACP,EAAOE,GAAR,MAA2B,GAARF,IAFxCK,GAQAJ,EAAe,GDgCfe,IACA,SAASnC,EAAQC,EAASmC,GAE/B,YAeA,SAASC,GAAuBlC,GAAO,MAAOA,IAAOA,EAAImC,WAAanC,GAAQsB,QAAStB,GAbvFG,OAAOC,eAAeN,EAAS,cAC7BI,OAAO,IAETJ,EAAQsC,QAAUzB,ME1FnB,IAAA0B,GAAAJ,EAAA,GF8FKK,EAAUJ,EAAuBG,GE7FtCE,EAAAN,EAAA,IFiGKO,EAAcN,EAAuBK,GE/F7BH,YAAU,SAAAK,GAAA,GAAGX,GAAHW,EAAGX,QAAStB,EAAZiC,EAAYjC,UAAWgB,EAAvBiB,EAAuBjB,WAAvB,OACrBc,GAAAhB,QAAAoB,cAAA,OAAKC,OAASC,OAAQ,WACpBN,EAAAhB,QAAAoB,cAAA,sBAAcZ,GACdQ,EAAAhB,QAAAoB,cAAA,UAAQG,UAAU,kBAAkBC,QAAStC,GAA7C,aAGC,IACD8B,EAAAhB,QAAAoB,cAAA,UAAQG,UAAU,oBAAoBC,QAAStB,GAA/C,mBAKJY,GAAQW,WACNjB,QAASU,EAAAlB,QAAU0B,OAAOC,WAC1BzC,UAAWgC,EAAAlB,QAAU4B,KAAKD,WAC1BzB,YAAagB,EAAAlB,QAAU4B,KAAKD,YFoH7BnD,EAAQwB,QEjHMc,GFqHTe,IACA,SAAStD,EAAQC,EAASmC,GAE/B,YAcA,SAASC,GAAuBlC,GAAO,MAAOA,IAAOA,EAAImC,WAAanC,GAAQsB,QAAStB,GAZvFG,OAAOC,eAAeN,EAAS,cAC3BI,OAAO,GGhJZ,IAAAkD,GAAAnB,EAAA,IACAoB,EAAApB,EAAA,IAOAqB,EAAArB,EAAA,KHiJKsB,EAAYrB,EAAuBoB,GG3IlCE,GACJhD,UAAY,kBAAM,EAAA6C,EAAA7C,WAAU,IAC5BgB,2BAGIiC,EAAkB,SAACzC,GAAD,OACtBc,QAAUd,EAAMc,SH6KjBhC,GAAQwB,SG5JM,EAAA8B,EAAAM,SAAQD,EAAiBD,GAAzBD,EAAAjC","file":"static/js/counter.2a33af03.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 75:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _ACTION_HANDLERS;\n\t\n\texports.increment = increment;\n\texports.default = counterReducer;\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\t// ------------------------------------\n\t// Constants\n\t// ------------------------------------\n\tvar COUNTER_INCREMENT = exports.COUNTER_INCREMENT = 'COUNTER_INCREMENT';\n\tvar COUNTER_DOUBLE_ASYNC = exports.COUNTER_DOUBLE_ASYNC = 'COUNTER_DOUBLE_ASYNC';\n\t\n\t// ------------------------------------\n\t// Actions\n\t// ------------------------------------\n\tfunction increment() {\n\t  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\t\n\t  return {\n\t    type: COUNTER_INCREMENT,\n\t    payload: value\n\t  };\n\t}\n\t\n\t/*  This is a thunk, meaning it is a function that immediately\n\t    returns a function for lazy evaluation. It is incredibly useful for\n\t    creating async actions, especially when combined with redux-thunk! */\n\t\n\tvar doubleAsync = exports.doubleAsync = function doubleAsync() {\n\t  return function (dispatch, getState) {\n\t    return new Promise(function (resolve) {\n\t      setTimeout(function () {\n\t        dispatch({\n\t          type: COUNTER_DOUBLE_ASYNC,\n\t          payload: getState().counter\n\t        });\n\t        resolve();\n\t      }, 200);\n\t    });\n\t  };\n\t};\n\t\n\tvar actions = exports.actions = {\n\t  increment: increment,\n\t  doubleAsync: doubleAsync\n\t\n\t  // ------------------------------------\n\t  // Action Handlers\n\t  // ------------------------------------\n\t};var ACTION_HANDLERS = (_ACTION_HANDLERS = {}, _defineProperty(_ACTION_HANDLERS, COUNTER_INCREMENT, function (state, action) {\n\t  return state + action.payload;\n\t}), _defineProperty(_ACTION_HANDLERS, COUNTER_DOUBLE_ASYNC, function (state, action) {\n\t  return state * 2;\n\t}), _ACTION_HANDLERS);\n\t\n\t// ------------------------------------\n\t// Reducer\n\t// ------------------------------------\n\tvar initialState = 0;\n\tfunction counterReducer() {\n\t  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\t  var action = arguments[1];\n\t\n\t  var handler = ACTION_HANDLERS[action.type];\n\t\n\t  return handler ? handler(state, action) : state;\n\t}\n\n/***/ },\n\n/***/ 139:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Counter = undefined;\n\t\n\tvar _react = __webpack_require__(5);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(19);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Counter = exports.Counter = function Counter(_ref) {\n\t  var counter = _ref.counter,\n\t      increment = _ref.increment,\n\t      doubleAsync = _ref.doubleAsync;\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { style: { margin: '0 auto' } },\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'Counter: ',\n\t      counter\n\t    ),\n\t    _react2.default.createElement(\n\t      'button',\n\t      { className: 'btn btn-primary', onClick: increment },\n\t      'Increment'\n\t    ),\n\t    ' ',\n\t    _react2.default.createElement(\n\t      'button',\n\t      { className: 'btn btn-secondary', onClick: doubleAsync },\n\t      'Double (Async)'\n\t    )\n\t  );\n\t};\n\tCounter.propTypes = {\n\t  counter: _propTypes2.default.number.isRequired,\n\t  increment: _propTypes2.default.func.isRequired,\n\t  doubleAsync: _propTypes2.default.func.isRequired\n\t};\n\t\n\texports.default = Counter;\n\n/***/ },\n\n/***/ 140:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _reactRedux = __webpack_require__(66);\n\t\n\tvar _counter = __webpack_require__(75);\n\t\n\tvar _Counter = __webpack_require__(139);\n\t\n\tvar _Counter2 = _interopRequireDefault(_Counter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/*  Object of action creators (can also be function that returns object).\n\t    Keys will be passed as props to presentational components. Here we are\n\t    implementing our wrapper around increment; the component doesn't care   */\n\t\n\tvar mapDispatchToProps = {\n\t    increment: function increment() {\n\t        return (0, _counter.increment)(1);\n\t    },\n\t    doubleAsync: _counter.doubleAsync\n\t};\n\t\n\t/*  This is a container component. Notice it does not contain any JSX,\n\t    nor does it import React. This component is **only** responsible for\n\t    wiring in the actions and state necessary to render a presentational\n\t    component - in this case, the counter:   */\n\t\n\tvar mapStateToProps = function mapStateToProps(state) {\n\t    return {\n\t        counter: state.counter\n\t    };\n\t};\n\t\n\t/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\t\n\t    import { createSelector } from 'reselect'\n\t    const counter = (state) => state.counter\n\t    const tripleCount = createSelector(counter, (count) => count * 3)\n\t    const mapStateToProps = (state) => ({\n\t      counter: tripleCount(state)\n\t    })\n\t\n\t    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n\t    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n\t    Selectors are composable. They can be used as input to other selectors.\n\t    https://github.com/reactjs/reselect    */\n\t\n\texports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Counter2.default);\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/counter.2a33af03.chunk.js","// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\nexport const COUNTER_DOUBLE_ASYNC = 'COUNTER_DOUBLE_ASYNC'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type    : COUNTER_INCREMENT,\n    payload : value\n  }\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk! */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dispatch({\n          type    : COUNTER_DOUBLE_ASYNC,\n          payload : getState().counter\n        })\n        resolve()\n      }, 200)\n    })\n  }\n}\n\nexport const actions = {\n  increment,\n  doubleAsync\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [COUNTER_INCREMENT]    : (state, action) => state + action.payload,\n  [COUNTER_DOUBLE_ASYNC] : (state, action) => state * 2\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = 0\nexport default function counterReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/modules/counter.js","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const Counter = ({ counter, increment, doubleAsync }) => (\n  <div style={{ margin: '0 auto' }} >\n    <h2>Counter: {counter}</h2>\n    <button className='btn btn-primary' onClick={increment}>\n      Increment\n    </button>\n    {' '}\n    <button className='btn btn-secondary' onClick={doubleAsync}>\n      Double (Async)\n    </button>\n  </div>\n)\nCounter.propTypes = {\n  counter: PropTypes.number.isRequired,\n  increment: PropTypes.func.isRequired,\n  doubleAsync: PropTypes.func.isRequired,\n}\n\nexport default Counter\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/components/Counter.js","import { connect } from 'react-redux'\nimport { increment, doubleAsync } from '../modules/counter'\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nimport Counter from '../components/Counter'\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the component doesn't care   */\n\nconst mapDispatchToProps = {\n  increment : () => increment(1),\n  doubleAsync\n}\n\nconst mapStateToProps = (state) => ({\n  counter : state.counter\n})\n\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/containers/CounterContainer.js"],"sourceRoot":""}